Cut Into Segments

TEST CASE
 INPUT ->     2
    7 3 2 2
    8 1 4 4
    
    OUTPUT- > 
    3
    8
    
    SOLUTIONS GIVEN BELOW OF THAT QUESTION !!
    
    #include<limits.h>
int solveRec(int n , int x , int y , int z){   // 1. TLE 
    if( n == 0)
        return 0;
    if( n < 0)
        return INT_MIN;
   int a = solveRec(n-x  , x ,y ,z) +1;
   int b = solveRec(n -y , x ,y ,z) +1;
   int c = solveRec(n -z , x ,y ,z) +1;
   int ans = max(a , max(b,c));
   return ans;
}
int solveMom(int n , int x ,int y , int z , vector<int>&dp){  // 2. DONE 
    if( n == 0)
        return 0;
    if( n< 0)
        return INT_MIN;
    if(dp[n] != -1)
        return dp[n];
    
       int a = solveMom(n-x  , x ,y ,z, dp) +1;
       int b = solveMom(n -y , x ,y ,z, dp) +1;
       int c = solveMom(n -z , x ,y ,z,dp) +1;
       int ans = max(a , max(b,c));
      dp[n] = ans;
    return dp[n];

}
int solveTab(int n ,int x  , int y , int z){    //3. DONE 
    vector<int> dp(n+1, INT_MIN); // INT_MIN here for to ignore -ve values in array
     dp[0] = 0;
    for(int i = 1 ;i <=n;i++){
        if(i-x>= 0)
        dp[i] = max(dp[i] , dp[i-x] +1);
           if(i-y>= 0)
        dp[i] = max(dp[i] , dp[i-y] +1);
          if(i-z>= 0)
        dp[i] = max(dp[i] , dp[i-z] +1);
    }
    if(dp[n] < 0)
        return 0;
    else dp[n];
}
int cutSegments(int n, int x, int y, int z) {
//    int ans = solveRec( n,x ,y,z);   //by  recursion call
//     if(ans < 0)
//         return 0;
//     else
//         return ans;
//     vector<int> dp(n+1 , -1);
//     int ans = solveMom(n , x ,y , z , dp);    // by memorization call
//     if(ans < 0)
//         return 0;
//     else
//         return ans;
    
    return solveTab(n , x,y ,z);   // by tabulation call solved 
    
}
